rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /predictions/{predictionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow writes from the server-side webhook
      allow write: if true;
    }
    
    match /daily_usage/{usageId} {
      allow read: if request.auth != null && usageId.matches(request.auth.uid + '_.*');
      allow create: if request.auth != null && 
                   request.resource.data.userId == request.auth.uid &&
                   usageId == request.auth.uid + '_' + request.resource.data.date;
      allow update: if request.auth != null && 
                   resource.data.userId == request.auth.uid &&
                   usageId == request.auth.uid + '_' + resource.data.date;
    }

    match /blog_posts/{postId} {
      // Anyone can read published blog posts
      allow read: if resource.data.published == true;
      // Only admin users can create/update/delete blog posts
      allow write: if request.auth != null && 
                  exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /feedback/{feedbackId} {
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && 
                 exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                 get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
} 